.globl main
.text

main:
	addi $t0, $zero, 0 #i=0
	la $s0, array #load base of array
	
	#array[0] = 5
	addi $t1, $s0, 0 # store base address
	addi $t2, $zero, 5 # offset
	sw $t2, 0($t1) #array[0] = 5. assign 5 to element in base address
	
	#array[1] = 4
	addi $t1, $s0, 4 #4 + abase address = array[1] (store array[1] to t1)
	add #t2, $zero, 4
	sw $t2, 0($t1) # array[1] = 4
	
	addi $t0, $zero, 2 # i = 2
for:  bge $t0, 7, done #branch greater eqaual

	# array[i-2]
	addi $t2, $t0, -2 #i-2
	mul $t2, $t2, 4 # 4*(i-2) offset
	add $t2, $t2, $s0 #array[i-2]
	lw $t3, 0($t2)

	# array[i-1]
	addi $t2, $t0, -1 #i-1
	mul $t2, #t2, 4 #4*(i-1)
	add $t2, $t2, $s0 #array[i-1]
	lw $t4, 0($t2)

	add $t3, $t3, $t4 #array[i-2] + array[i-1]

	mul $t2, $t0, 4 #i*4
	add $t2, $t2, $0 #address of array[i]
	sw $t3, 0($t2)

	addi $t0, $t0, 1
	j for

done: li $v0,10
    syscall

    .data

array: .space 20


